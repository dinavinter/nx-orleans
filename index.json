{
  "references/grain-controllers/SchemaLand.Api.Controllers.CalculatorController.html": {
    "href": "references/grain-controllers/SchemaLand.Api.Controllers.CalculatorController.html",
    "title": "Class CalculatorController | NX + Net + Orleans + Docfx",
    "keywords": "Class CalculatorController Namespace: SchemaLand.Api.Controllers Assembly: grain-controllers.dll [ApiController] [Route(\"api/[controller]\")] [Produces(\"application/json\", new string[] { })] public class CalculatorController : ControllerBase Inheritance object ← ControllerBase ← CalculatorController Inherited Members ControllerBase.StatusCode(int), ControllerBase.StatusCode(int, object?), ControllerBase.Content(string), ControllerBase.Content(string, string), ControllerBase.Content(string, string, Encoding), ControllerBase.Content(string, MediaTypeHeaderValue?), ControllerBase.NoContent(), ControllerBase.Ok(), ControllerBase.Ok(object?), ControllerBase.Redirect(string), ControllerBase.RedirectPermanent(string), ControllerBase.RedirectPreserveMethod(string), ControllerBase.RedirectPermanentPreserveMethod(string), ControllerBase.LocalRedirect(string), ControllerBase.LocalRedirectPermanent(string), ControllerBase.LocalRedirectPreserveMethod(string), ControllerBase.LocalRedirectPermanentPreserveMethod(string), ControllerBase.RedirectToAction(), ControllerBase.RedirectToAction(string?), ControllerBase.RedirectToAction(string?, object?), ControllerBase.RedirectToAction(string?, string?), ControllerBase.RedirectToAction(string?, string?, object?), ControllerBase.RedirectToAction(string?, string?, string?), ControllerBase.RedirectToAction(string?, string?, object?, string?), ControllerBase.RedirectToActionPreserveMethod(string?, string?, object?, string?), ControllerBase.RedirectToActionPermanent(string?), ControllerBase.RedirectToActionPermanent(string?, object?), ControllerBase.RedirectToActionPermanent(string?, string?), ControllerBase.RedirectToActionPermanent(string?, string?, string?), ControllerBase.RedirectToActionPermanent(string?, string?, object?), ControllerBase.RedirectToActionPermanent(string?, string?, object?, string?), ControllerBase.RedirectToActionPermanentPreserveMethod(string?, string?, object?, string?), ControllerBase.RedirectToRoute(string?), ControllerBase.RedirectToRoute(object?), ControllerBase.RedirectToRoute(string?, object?), ControllerBase.RedirectToRoute(string?, string?), ControllerBase.RedirectToRoute(string?, object?, string?), ControllerBase.RedirectToRoutePreserveMethod(string?, object?, string?), ControllerBase.RedirectToRoutePermanent(string?), ControllerBase.RedirectToRoutePermanent(object?), ControllerBase.RedirectToRoutePermanent(string?, object?), ControllerBase.RedirectToRoutePermanent(string?, string?), ControllerBase.RedirectToRoutePermanent(string?, object?, string?), ControllerBase.RedirectToRoutePermanentPreserveMethod(string?, object?, string?), ControllerBase.RedirectToPage(string), ControllerBase.RedirectToPage(string, object?), ControllerBase.RedirectToPage(string, string?), ControllerBase.RedirectToPage(string, string?, object?), ControllerBase.RedirectToPage(string, string?, string?), ControllerBase.RedirectToPage(string, string?, object?, string?), ControllerBase.RedirectToPagePermanent(string), ControllerBase.RedirectToPagePermanent(string, object?), ControllerBase.RedirectToPagePermanent(string, string?), ControllerBase.RedirectToPagePermanent(string, string?, string?), ControllerBase.RedirectToPagePermanent(string, string?, object?, string?), ControllerBase.RedirectToPagePreserveMethod(string, string?, object?, string?), ControllerBase.RedirectToPagePermanentPreserveMethod(string, string?, object?, string?), ControllerBase.File(byte[], string), ControllerBase.File(byte[], string, bool), ControllerBase.File(byte[], string, string?), ControllerBase.File(byte[], string, string?, bool), ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue), ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool), ControllerBase.File(byte[], string, string?, DateTimeOffset?, EntityTagHeaderValue), ControllerBase.File(byte[], string, string?, DateTimeOffset?, EntityTagHeaderValue, bool), ControllerBase.File(Stream, string), ControllerBase.File(Stream, string, bool), ControllerBase.File(Stream, string, string?), ControllerBase.File(Stream, string, string?, bool), ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue), ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool), ControllerBase.File(Stream, string, string?, DateTimeOffset?, EntityTagHeaderValue), ControllerBase.File(Stream, string, string?, DateTimeOffset?, EntityTagHeaderValue, bool), ControllerBase.File(string, string), ControllerBase.File(string, string, bool), ControllerBase.File(string, string, string?), ControllerBase.File(string, string, string?, bool), ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue), ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool), ControllerBase.File(string, string, string?, DateTimeOffset?, EntityTagHeaderValue), ControllerBase.File(string, string, string?, DateTimeOffset?, EntityTagHeaderValue, bool), ControllerBase.PhysicalFile(string, string), ControllerBase.PhysicalFile(string, string, bool), ControllerBase.PhysicalFile(string, string, string?), ControllerBase.PhysicalFile(string, string, string?, bool), ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue), ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool), ControllerBase.PhysicalFile(string, string, string?, DateTimeOffset?, EntityTagHeaderValue), ControllerBase.PhysicalFile(string, string, string?, DateTimeOffset?, EntityTagHeaderValue, bool), ControllerBase.Unauthorized(), ControllerBase.Unauthorized(object?), ControllerBase.NotFound(), ControllerBase.NotFound(object?), ControllerBase.BadRequest(), ControllerBase.BadRequest(object?), ControllerBase.BadRequest(ModelStateDictionary), ControllerBase.UnprocessableEntity(), ControllerBase.UnprocessableEntity(object?), ControllerBase.UnprocessableEntity(ModelStateDictionary), ControllerBase.Conflict(), ControllerBase.Conflict(object?), ControllerBase.Conflict(ModelStateDictionary), ControllerBase.Problem(string?, string?, int?, string?, string?), ControllerBase.ValidationProblem(ValidationProblemDetails), ControllerBase.ValidationProblem(ModelStateDictionary), ControllerBase.ValidationProblem(), ControllerBase.ValidationProblem(string?, string?, int?, string?, string?, ModelStateDictionary?), ControllerBase.Created(string, object?), ControllerBase.Created(Uri, object?), ControllerBase.CreatedAtAction(string?, object?), ControllerBase.CreatedAtAction(string?, object?, object?), ControllerBase.CreatedAtAction(string?, string?, object?, object?), ControllerBase.CreatedAtRoute(string?, object?), ControllerBase.CreatedAtRoute(object?, object?), ControllerBase.CreatedAtRoute(string?, object?, object?), ControllerBase.Accepted(), ControllerBase.Accepted(object?), ControllerBase.Accepted(Uri), ControllerBase.Accepted(string?), ControllerBase.Accepted(string?, object?), ControllerBase.Accepted(Uri, object?), ControllerBase.AcceptedAtAction(string?), ControllerBase.AcceptedAtAction(string?, string?), ControllerBase.AcceptedAtAction(string?, object?), ControllerBase.AcceptedAtAction(string?, string?, object?), ControllerBase.AcceptedAtAction(string?, object?, object?), ControllerBase.AcceptedAtAction(string?, string?, object?, object?), ControllerBase.AcceptedAtRoute(object?), ControllerBase.AcceptedAtRoute(string?), ControllerBase.AcceptedAtRoute(string?, object?), ControllerBase.AcceptedAtRoute(object?, object?), ControllerBase.AcceptedAtRoute(string?, object?, object?), ControllerBase.Challenge(), ControllerBase.Challenge(params string[]), ControllerBase.Challenge(AuthenticationProperties), ControllerBase.Challenge(AuthenticationProperties, params string[]), ControllerBase.Forbid(), ControllerBase.Forbid(params string[]), ControllerBase.Forbid(AuthenticationProperties), ControllerBase.Forbid(AuthenticationProperties, params string[]), ControllerBase.SignIn(ClaimsPrincipal), ControllerBase.SignIn(ClaimsPrincipal, string), ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties), ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string), ControllerBase.SignOut(), ControllerBase.SignOut(AuthenticationProperties), ControllerBase.SignOut(params string[]), ControllerBase.SignOut(AuthenticationProperties, params string[]), ControllerBase.TryUpdateModelAsync<TModel>(TModel), ControllerBase.TryUpdateModelAsync<TModel>(TModel, string), ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider), ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object?>>[]), ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>), ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object?>>[]), ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>), ControllerBase.TryUpdateModelAsync(object, Type, string), ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>), ControllerBase.TryValidateModel(object), ControllerBase.TryValidateModel(object, string?), ControllerBase.HttpContext, ControllerBase.Request, ControllerBase.Response, ControllerBase.RouteData, ControllerBase.ModelState, ControllerBase.ControllerContext, ControllerBase.MetadataProvider, ControllerBase.ModelBinderFactory, ControllerBase.Url, ControllerBase.ObjectValidator, ControllerBase.ProblemDetailsFactory, ControllerBase.User, ControllerBase.Empty, object.Equals(object?), object.Equals(object?, object?), object.GetHashCode(), object.GetType(), object.MemberwiseClone(), object.ReferenceEquals(object?, object?), object.ToString() Constructors CalculatorController(ILogger<CalculatorController>, IClusterClient) public CalculatorController(ILogger<CalculatorController> logger, IClusterClient orleansClient) Parameters logger ILogger<CalculatorController> orleansClient IClusterClient Properties Logger public ILogger Logger { get; } Property Value ILogger OrleansClient public IClusterClient OrleansClient { get; } Property Value IClusterClient Methods Add(int, int) Adds two numbers provided [ProducesResponseType(typeof(int), 200)] [ProducesResponseType(400)] [HttpGet(\"{l}+{r}\", Name = \"Add\")] public virtual Task<IActionResult> Add(int l, int r) Parameters l int An integer to add r int An integer to add Returns Task<IActionResult> The sum of the two numbers provided. Remarks Sample request: GET /api/Adder/4+5"
  },
  "references/grain-controllers/SchemaLand.Api.Controllers.html": {
    "href": "references/grain-controllers/SchemaLand.Api.Controllers.html",
    "title": "Namespace SchemaLand.Api.Controllers | NX + Net + Orleans + Docfx",
    "keywords": "Namespace SchemaLand.Api.Controllers Classes CalculatorController"
  },
  "references/grain-controllers/SchemaLand.Api.html": {
    "href": "references/grain-controllers/SchemaLand.Api.html",
    "title": "Namespace SchemaLand.Api | NX + Net + Orleans + Docfx",
    "keywords": "Namespace SchemaLand.Api Namespaces SchemaLand.Api.Controllers"
  },
  "references/grain-controllers/SchemaLand.html": {
    "href": "references/grain-controllers/SchemaLand.html",
    "title": "Namespace SchemaLand | NX + Net + Orleans + Docfx",
    "keywords": "Namespace SchemaLand Namespaces SchemaLand.Api"
  },
  "references/grain-controllers/index.html": {
    "href": "references/grain-controllers/index.html",
    "title": "Grain controllers | NX + Net + Orleans + Docfx",
    "keywords": "Grain controllers Class CalculatorController Namespace SchemaLand.Api.Controllers Namespace SchemaLand.Api Namespace SchemaLand"
  },
  "references/grains/SchemaLand.Api.Contract.ICalculatorGrain.html": {
    "href": "references/grains/SchemaLand.Api.Contract.ICalculatorGrain.html",
    "title": "Interface ICalculatorGrain | NX + Net + Orleans + Docfx",
    "keywords": "Interface ICalculatorGrain Namespace: SchemaLand.Api.Contract Assembly: grains.dll public interface ICalculatorGrain : IGrainWithGuidKey, IGrain, IAddressable Implements IGrainWithGuidKey, IGrain, IAddressable Methods Add(int, int) Adds two integers Task<int> Add(int l, int r) Parameters l int Integer to Add r int Integer to Add Returns Task<int> Sum of and"
  },
  "references/grains/SchemaLand.Api.Contract.html": {
    "href": "references/grains/SchemaLand.Api.Contract.html",
    "title": "Namespace SchemaLand.Api.Contract | NX + Net + Orleans + Docfx",
    "keywords": "Namespace SchemaLand.Api.Contract Interfaces ICalculatorGrain"
  },
  "references/grains/SchemaLand.Api.Implementation.CalculatorGrain.html": {
    "href": "references/grains/SchemaLand.Api.Implementation.CalculatorGrain.html",
    "title": "Class CalculatorGrain | NX + Net + Orleans + Docfx",
    "keywords": "Class CalculatorGrain Namespace: SchemaLand.Api.Implementation Assembly: grains.dll public class CalculatorGrain : Grain, ILifecycleParticipant<IGrainLifecycle>, ICalculatorGrain, IGrainWithGuidKey, IGrain, IAddressable Inheritance object ← Grain ← CalculatorGrain Implements ILifecycleParticipant<IGrainLifecycle>, ICalculatorGrain, IGrainWithGuidKey, IGrain, IAddressable Inherited Members Grain.RegisterTimer(Func<object, Task>, object, TimeSpan, TimeSpan), Grain.RegisterOrUpdateReminder(string, TimeSpan, TimeSpan), Grain.UnregisterReminder(IGrainReminder), Grain.GetReminder(string), Grain.GetReminders(), Grain.GetStreamProvider(string), Grain.DeactivateOnIdle(), Grain.DelayDeactivation(TimeSpan), Grain.OnActivateAsync(), Grain.OnDeactivateAsync(), Grain.Participate(IGrainLifecycle), Grain.GrainReference, Grain.GrainFactory, Grain.ServiceProvider, Grain.IdentityString, Grain.RuntimeIdentity, object.Equals(object?), object.Equals(object?, object?), object.GetHashCode(), object.GetType(), object.MemberwiseClone(), object.ReferenceEquals(object?, object?), object.ToString() Methods Add(int, int) Adds two integers public Task<int> Add(int l, int r) Parameters l int Integer to Add r int Integer to Add Returns Task<int> Sum of and"
  },
  "references/grains/SchemaLand.Api.Implementation.html": {
    "href": "references/grains/SchemaLand.Api.Implementation.html",
    "title": "Namespace SchemaLand.Api.Implementation | NX + Net + Orleans + Docfx",
    "keywords": "Namespace SchemaLand.Api.Implementation Classes CalculatorGrain"
  },
  "references/grains/SchemaLand.Api.html": {
    "href": "references/grains/SchemaLand.Api.html",
    "title": "Namespace SchemaLand.Api | NX + Net + Orleans + Docfx",
    "keywords": "Namespace SchemaLand.Api Namespaces SchemaLand.Api.Contract SchemaLand.Api.Implementation"
  },
  "references/grains/SchemaLand.html": {
    "href": "references/grains/SchemaLand.html",
    "title": "Namespace SchemaLand | NX + Net + Orleans + Docfx",
    "keywords": "Namespace SchemaLand Namespaces SchemaLand.Api"
  },
  "references/grains/index.html": {
    "href": "references/grains/index.html",
    "title": "Grains | NX + Net + Orleans + Docfx",
    "keywords": "Grains Interface ICalculatorGrain Namespace SchemaLand.Api.Contract Class CalculatorGrain Namespace SchemaLand.Api.Implementation Namespace SchemaLand.Api Namespace SchemaLand"
  },
  "references/index.html": {
    "href": "references/index.html",
    "title": "References | NX + Net + Orleans + Docfx",
    "keywords": "References Grain controllers Grains"
  }
}
